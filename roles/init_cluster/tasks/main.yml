---
- name: Perform dry run
  command:
    cmd: kubeadm init --pod-network-cidr=10.244.0.0/16 --dry-run
    creates: /etc/kubernetes
  when: inventory_hostname == "master1"

- name: Initialize Kubernetes master
  command:
    cmd: kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint {{ hostvars['haproxy'].inventory_hostname }}
    creates: /etc/kubernetes/admin.conf
  when: inventory_hostname == "master1"

- name: Apply Flannel
  command:
    cmd: kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
    creates: /run/flannel/subnet.env
  when: inventory_hostname == "master1"

- name: Get kubeadm config
  shell:
    cmd: kubectl --kubeconfig=/etc/kubernetes/admin.conf get cm kubeadm-config -n kube-system -o yaml | sed '/^ \{0,2\}[a-zA-Z]/d' | sed 's/    //' > /tmp/kubeadm-config.conf
    creates: /tmp/kubeadm-config.conf
  when: inventory_hostname == "master1"

- name: Get certificate key
  shell:
    cmd: kubeadm init phase upload-certs --upload-certs --config /tmp/kubeadm-config.conf | grep -e "[a-z0-9]\{64\}"
  register: cert_key
  when: inventory_hostname == "master1"

- name: Create join token
  shell:
    cmd: kubeadm token create --print-join-command
  register: join_token
  when: inventory_hostname == "master1"

- name: Join masters
  shell:
    cmd: "{{ hostvars['master1'].join_token.stdout }} --control-plane --certificate-key {{ hostvars['master1'].cert_key.stdout }}"
    creates: /etc/kubernetes/admin.conf
  when: inventory_hostname == "master2" and "'master' in group_names"

- name: Join nodes
  shell:
    cmd: "{{ hostvars['master1'].join_token.stdout }}"
    creates: /etc/kubernetes/kubelet.conf
  when: "'node' in group_names"
